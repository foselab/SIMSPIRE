/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class MVMStateMachineCore implements IStatemachine, ITimed, ICycleBased {
	private static class EvBuf {
		private boolean startupEnded;
		private boolean resume;
		private boolean poweroff;
		private boolean selfTestPassed;
		private boolean startVentilation;
		private boolean stopVentilation;
	}
	private static class TimeEventsEvBuf {
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_1;
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATION_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PCV_R1_RM_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_1;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_2;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_3;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_1;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_time_event_0;
		private boolean mVMStateMachineCore_MAIN_REGION_PSV_R1_RM_time_event_0;
	}
	private static class MVMStateMachineCoreEvBuf {
		private EvBuf iface = new EvBuf();
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	public enum State {
		STOP_STOPREQUESTED,
		STOP_RUNNING,
		MAIN_REGION_STARTUP,
		MAIN_REGION_PCV,
		MAIN_REGION_PCV_R1_EXPIRATORYPAUSE,
		MAIN_REGION_PCV_R1_EXPIRATION,
		MAIN_REGION_PCV_R1_INSPIRATION,
		MAIN_REGION_PCV_R1_INSPIRATORYPAUSE,
		MAIN_REGION_PCV_R1_RM,
		MAIN_REGION_PSV,
		MAIN_REGION_PSV_R1_EXPIRATORYPAUSE,
		MAIN_REGION_PSV_R1_EXPIRATION,
		MAIN_REGION_PSV_R1_INSPIRATION,
		MAIN_REGION_PSV_R1_INSPIRATORYPAUSE,
		MAIN_REGION_PSV_R1_RM,
		MAIN_REGION__FINAL_,
		MAIN_REGION_SELFTEST,
		MAIN_REGION_VENTILATIONOFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[15];
	
	private MVMStateMachineCoreEvBuf current = new MVMStateMachineCoreEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public MVMStateMachineCore() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setMode(0l);
		
		setStopVentilationReq(false);
		
		setMax_rm_time(10000l);
		
		setExp_pause(false);
		
		setIns_pause(false);
		
		setRm_request(false);
		
		setInspiration_duration_ms(2000l);
		
		setExpiration_duration_ms(4000l);
		
		setMax_insp_time_psv(7000l);
		
		setApnealag(10000l);
		
		setApnea_backup_mode(false);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		swapInEvents();
		
		microStep();
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_stop_default();
		enterSequence_MAIN_REGION_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_stop();
		exitSequence_MAIN_REGION();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.iface.startupEnded = startupEnded;
		startupEnded = false;
		
		current.iface.resume = resume;
		resume = false;
		
		current.iface.poweroff = poweroff;
		poweroff = false;
		
		current.iface.selfTestPassed = selfTestPassed;
		selfTestPassed = false;
		
		current.iface.startVentilation = startVentilation;
		startVentilation = false;
		
		current.iface.stopVentilation = stopVentilation;
		stopVentilation = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_1 = timeEvents[2];
		timeEvents[2] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATION_time_event_0 = timeEvents[3];
		timeEvents[3] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_time_event_0 = timeEvents[4];
		timeEvents[4] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_RM_time_event_0 = timeEvents[5];
		timeEvents[5] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_time_event_0 = timeEvents[6];
		timeEvents[6] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_0 = timeEvents[7];
		timeEvents[7] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_1 = timeEvents[8];
		timeEvents[8] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_2 = timeEvents[9];
		timeEvents[9] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_3 = timeEvents[10];
		timeEvents[10] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_0 = timeEvents[11];
		timeEvents[11] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_1 = timeEvents[12];
		timeEvents[12] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_time_event_0 = timeEvents[13];
		timeEvents[13] = false;
		
		current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_RM_time_event_0 = timeEvents[14];
		timeEvents[14] = false;
	}
	
	private void clearInEvents() {
		startupEnded = false;
		resume = false;
		poweroff = false;
		selfTestPassed = false;
		startVentilation = false;
		stopVentilation = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
		timeEvents[10] = false;
		timeEvents[11] = false;
		timeEvents[12] = false;
		timeEvents[13] = false;
		timeEvents[14] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case STOP_STOPREQUESTED:
			transitioned = stop_stopRequested_react(transitioned);
			break;
		case STOP_RUNNING:
			transitioned = stop_running_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_STARTUP:
				mAIN_REGION_STARTUP_react(transitioned);
				break;
			case MAIN_REGION_PCV_R1_EXPIRATORYPAUSE:
				mAIN_REGION_PCV_R1_EXPIRATORYPAUSE_react(transitioned);
				break;
			case MAIN_REGION_PCV_R1_EXPIRATION:
				mAIN_REGION_PCV_R1_EXPIRATION_react(transitioned);
				break;
			case MAIN_REGION_PCV_R1_INSPIRATION:
				mAIN_REGION_PCV_R1_INSPIRATION_react(transitioned);
				break;
			case MAIN_REGION_PCV_R1_INSPIRATORYPAUSE:
				mAIN_REGION_PCV_R1_INSPIRATORYPAUSE_react(transitioned);
				break;
			case MAIN_REGION_PCV_R1_RM:
				mAIN_REGION_PCV_R1_RM_react(transitioned);
				break;
			case MAIN_REGION_PSV_R1_EXPIRATORYPAUSE:
				mAIN_REGION_PSV_R1_EXPIRATORYPAUSE_react(transitioned);
				break;
			case MAIN_REGION_PSV_R1_EXPIRATION:
				mAIN_REGION_PSV_R1_EXPIRATION_react(transitioned);
				break;
			case MAIN_REGION_PSV_R1_INSPIRATION:
				mAIN_REGION_PSV_R1_INSPIRATION_react(transitioned);
				break;
			case MAIN_REGION_PSV_R1_INSPIRATORYPAUSE:
				mAIN_REGION_PSV_R1_INSPIRATORYPAUSE_react(transitioned);
				break;
			case MAIN_REGION_PSV_R1_RM:
				mAIN_REGION_PSV_R1_RM_react(transitioned);
				break;
			case MAIN_REGION__FINAL_:
				mAIN_REGION__final__react(transitioned);
				break;
			case MAIN_REGION_SELFTEST:
				mAIN_REGION_SELFTEST_react(transitioned);
				break;
			case MAIN_REGION_VENTILATIONOFF:
				mAIN_REGION_VENTILATIONOFF_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case STOP_STOPREQUESTED:
			return stateVector[0] == State.STOP_STOPREQUESTED;
		case STOP_RUNNING:
			return stateVector[0] == State.STOP_RUNNING;
		case MAIN_REGION_STARTUP:
			return stateVector[1] == State.MAIN_REGION_STARTUP;
		case MAIN_REGION_PCV:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_PCV.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_PCV_R1_RM.ordinal();
		case MAIN_REGION_PCV_R1_EXPIRATORYPAUSE:
			return stateVector[1] == State.MAIN_REGION_PCV_R1_EXPIRATORYPAUSE;
		case MAIN_REGION_PCV_R1_EXPIRATION:
			return stateVector[1] == State.MAIN_REGION_PCV_R1_EXPIRATION;
		case MAIN_REGION_PCV_R1_INSPIRATION:
			return stateVector[1] == State.MAIN_REGION_PCV_R1_INSPIRATION;
		case MAIN_REGION_PCV_R1_INSPIRATORYPAUSE:
			return stateVector[1] == State.MAIN_REGION_PCV_R1_INSPIRATORYPAUSE;
		case MAIN_REGION_PCV_R1_RM:
			return stateVector[1] == State.MAIN_REGION_PCV_R1_RM;
		case MAIN_REGION_PSV:
			return stateVector[1].ordinal() >= State.
					MAIN_REGION_PSV.ordinal()&& stateVector[1].ordinal() <= State.MAIN_REGION_PSV_R1_RM.ordinal();
		case MAIN_REGION_PSV_R1_EXPIRATORYPAUSE:
			return stateVector[1] == State.MAIN_REGION_PSV_R1_EXPIRATORYPAUSE;
		case MAIN_REGION_PSV_R1_EXPIRATION:
			return stateVector[1] == State.MAIN_REGION_PSV_R1_EXPIRATION;
		case MAIN_REGION_PSV_R1_INSPIRATION:
			return stateVector[1] == State.MAIN_REGION_PSV_R1_INSPIRATION;
		case MAIN_REGION_PSV_R1_INSPIRATORYPAUSE:
			return stateVector[1] == State.MAIN_REGION_PSV_R1_INSPIRATORYPAUSE;
		case MAIN_REGION_PSV_R1_RM:
			return stateVector[1] == State.MAIN_REGION_PSV_R1_RM;
		case MAIN_REGION__FINAL_:
			return stateVector[1] == State.MAIN_REGION__FINAL_;
		case MAIN_REGION_SELFTEST:
			return stateVector[1] == State.MAIN_REGION_SELFTEST;
		case MAIN_REGION_VENTILATIONOFF:
			return stateVector[1] == State.MAIN_REGION_VENTILATIONOFF;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	
	public interface OperationCallback {
	
		public void finish();
		
		public void start();
		
		public void closeInputValve();
		
		public void openInputValve(long p);
		
		public void closeOutputValve();
		
		public void openOutputValve();
		
		public boolean pawGTMaxPinsp();
		
		public boolean dropPAW_ITS_PCV();
		
		public long min_exp_time_psv();
		
		public boolean flowDropPSV();
		
		public boolean dropPAW_ITS_PSV();
		
		public void apneaAlarm();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean startupEnded;
	
	
	public void raiseStartupEnded() {
		startupEnded = true;
	}
	
	private boolean resume;
	
	
	public void raiseResume() {
		resume = true;
	}
	
	private boolean poweroff;
	
	
	public void raisePoweroff() {
		poweroff = true;
	}
	
	private boolean selfTestPassed;
	
	
	public void raiseSelfTestPassed() {
		selfTestPassed = true;
	}
	
	private boolean startVentilation;
	
	
	public void raiseStartVentilation() {
		startVentilation = true;
	}
	
	private boolean stopVentilation;
	
	
	public void raiseStopVentilation() {
		stopVentilation = true;
	}
	
	private long mode;
	
	public long getMode() {
		return mode;
	}
	
	public void setMode(long value) {
		this.mode = value;
	}
	
	public static final long mVM_mode_PCV = 1l;
	
	public long getMVM_mode_PCV() {
		return mVM_mode_PCV;
	}
	
	public static final long mVM_mode_PSV = 2l;
	
	public long getMVM_mode_PSV() {
		return mVM_mode_PSV;
	}
	
	public static final long mVM_PIO_PCV = 1l;
	
	public long getMVM_PIO_PCV() {
		return mVM_PIO_PCV;
	}
	
	public static final long mVM_PIO_PSV = 2l;
	
	public long getMVM_PIO_PSV() {
		return mVM_PIO_PSV;
	}
	
	public static final long mVM_PIO_RM = 3l;
	
	public long getMVM_PIO_RM() {
		return mVM_PIO_RM;
	}
	
	private boolean stopVentilationReq;
	
	public boolean getStopVentilationReq() {
		return stopVentilationReq;
	}
	
	public void setStopVentilationReq(boolean value) {
		this.stopVentilationReq = value;
	}
	
	public static final long max_exp_pause = 20000l;
	
	public long getMax_exp_pause() {
		return max_exp_pause;
	}
	
	public static final long max_ins_pause = 20000l;
	
	public long getMax_ins_pause() {
		return max_ins_pause;
	}
	
	private long max_rm_time;
	
	public long getMax_rm_time() {
		return max_rm_time;
	}
	
	public void setMax_rm_time(long value) {
		this.max_rm_time = value;
	}
	
	private boolean exp_pause;
	
	public boolean getExp_pause() {
		return exp_pause;
	}
	
	public void setExp_pause(boolean value) {
		this.exp_pause = value;
	}
	
	private boolean ins_pause;
	
	public boolean getIns_pause() {
		return ins_pause;
	}
	
	public void setIns_pause(boolean value) {
		this.ins_pause = value;
	}
	
	private boolean rm_request;
	
	public boolean getRm_request() {
		return rm_request;
	}
	
	public void setRm_request(boolean value) {
		this.rm_request = value;
	}
	
	private long inspiration_duration_ms;
	
	public long getInspiration_duration_ms() {
		return inspiration_duration_ms;
	}
	
	public void setInspiration_duration_ms(long value) {
		this.inspiration_duration_ms = value;
	}
	
	private long expiration_duration_ms;
	
	public long getExpiration_duration_ms() {
		return expiration_duration_ms;
	}
	
	public void setExpiration_duration_ms(long value) {
		this.expiration_duration_ms = value;
	}
	
	public static final long triggerWindowDelay_ms = 1000l;
	
	public long getTriggerWindowDelay_ms() {
		return triggerWindowDelay_ms;
	}
	
	public static final long min_insp_time_ms = 1000l;
	
	public long getMin_insp_time_ms() {
		return min_insp_time_ms;
	}
	
	private long max_insp_time_psv;
	
	public long getMax_insp_time_psv() {
		return max_insp_time_psv;
	}
	
	public void setMax_insp_time_psv(long value) {
		this.max_insp_time_psv = value;
	}
	
	private long apnealag;
	
	public long getApnealag() {
		return apnealag;
	}
	
	public void setApnealag(long value) {
		this.apnealag = value;
	}
	
	private boolean apnea_backup_mode;
	
	public boolean getApnea_backup_mode() {
		return apnea_backup_mode;
	}
	
	public void setApnea_backup_mode(boolean value) {
		this.apnea_backup_mode = value;
	}
	
	/* Entry action for state 'stopRequested'. */
	private void entryAction_stop_stopRequested() {
		setStopVentilationReq(true);
	}
	
	/* Entry action for state 'EXPIRATORYPAUSE'. */
	private void entryAction_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE() {
		timerService.setTimer(this, 0, getMax_exp_pause(), false);
	}
	
	/* Entry action for state 'EXPIRATION'. */
	private void entryAction_MAIN_REGION_PCV_R1_EXPIRATION() {
		timerService.setTimer(this, 1, getExpiration_duration_ms(), false);
		
		timerService.setTimer(this, 2, getTriggerWindowDelay_ms(), false);
		
		operationCallback.closeInputValve();
		
		operationCallback.openOutputValve();
	}
	
	/* Entry action for state 'INSPIRATION'. */
	private void entryAction_MAIN_REGION_PCV_R1_INSPIRATION() {
		timerService.setTimer(this, 3, getInspiration_duration_ms(), false);
		
		operationCallback.openInputValve(getMVM_PIO_PCV());
	}
	
	/* Entry action for state 'INSPIRATORYPAUSE'. */
	private void entryAction_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE() {
		timerService.setTimer(this, 4, getMax_ins_pause(), false);
		
		operationCallback.closeInputValve();
	}
	
	/* Entry action for state 'RM'. */
	private void entryAction_MAIN_REGION_PCV_R1_RM() {
		timerService.setTimer(this, 5, getMax_rm_time(), false);
		
		operationCallback.openInputValve(getMVM_PIO_RM());
	}
	
	/* Entry action for state 'PSV'. */
	private void entryAction_MAIN_REGION_PSV() {
		setApnea_backup_mode(false);
	}
	
	/* Entry action for state 'EXPIRATORYPAUSE'. */
	private void entryAction_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE() {
		timerService.setTimer(this, 6, getMax_exp_pause(), false);
		
		operationCallback.closeOutputValve();
	}
	
	/* Entry action for state 'EXPIRATION'. */
	private void entryAction_MAIN_REGION_PSV_R1_EXPIRATION() {
		timerService.setTimer(this, 7, getTriggerWindowDelay_ms(), false);
		
		timerService.setTimer(this, 8, getApnealag(), false);
		
		timerService.setTimer(this, 9, operationCallback.min_exp_time_psv(), false);
		
		timerService.setTimer(this, 10, operationCallback.min_exp_time_psv(), false);
		
		operationCallback.closeInputValve();
		
		operationCallback.openOutputValve();
	}
	
	/* Entry action for state 'INSPIRATION'. */
	private void entryAction_MAIN_REGION_PSV_R1_INSPIRATION() {
		timerService.setTimer(this, 11, getMin_insp_time_ms(), false);
		
		timerService.setTimer(this, 12, getMax_insp_time_psv(), false);
		
		operationCallback.openInputValve(getMVM_PIO_PSV());
	}
	
	/* Entry action for state 'INSPIRATORYPAUSE'. */
	private void entryAction_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE() {
		timerService.setTimer(this, 13, getMax_ins_pause(), false);
		
		operationCallback.closeInputValve();
	}
	
	/* Entry action for state 'RM'. */
	private void entryAction_MAIN_REGION_PSV_R1_RM() {
		timerService.setTimer(this, 14, getMax_rm_time(), false);
		
		operationCallback.openInputValve(getMVM_PIO_RM());
	}
	
	/* Entry action for state 'VENTILATIONOFF'. */
	private void entryAction_MAIN_REGION_VENTILATIONOFF() {
		operationCallback.closeInputValve();
		
		operationCallback.openOutputValve();
		
		operationCallback.finish();
	}
	
	/* Exit action for state 'EXPIRATORYPAUSE'. */
	private void exitAction_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'EXPIRATION'. */
	private void exitAction_MAIN_REGION_PCV_R1_EXPIRATION() {
		timerService.unsetTimer(this, 1);
		
		timerService.unsetTimer(this, 2);
		
		operationCallback.closeOutputValve();
	}
	
	/* Exit action for state 'INSPIRATION'. */
	private void exitAction_MAIN_REGION_PCV_R1_INSPIRATION() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'INSPIRATORYPAUSE'. */
	private void exitAction_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'RM'. */
	private void exitAction_MAIN_REGION_PCV_R1_RM() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'EXPIRATORYPAUSE'. */
	private void exitAction_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'EXPIRATION'. */
	private void exitAction_MAIN_REGION_PSV_R1_EXPIRATION() {
		timerService.unsetTimer(this, 7);
		
		timerService.unsetTimer(this, 8);
		
		timerService.unsetTimer(this, 9);
		
		timerService.unsetTimer(this, 10);
		
		operationCallback.closeOutputValve();
	}
	
	/* Exit action for state 'INSPIRATION'. */
	private void exitAction_MAIN_REGION_PSV_R1_INSPIRATION() {
		timerService.unsetTimer(this, 11);
		
		timerService.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'INSPIRATORYPAUSE'. */
	private void exitAction_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE() {
		timerService.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'RM'. */
	private void exitAction_MAIN_REGION_PSV_R1_RM() {
		timerService.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'SELFTEST'. */
	private void exitAction_MAIN_REGION_SELFTEST() {
		setMode(mVM_mode_PCV);
	}
	
	/* 'default' enter sequence for state stopRequested */
	private void enterSequence_stop_stopRequested_default() {
		entryAction_stop_stopRequested();
		stateVector[0] = State.STOP_STOPREQUESTED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state running */
	private void enterSequence_stop_running_default() {
		stateVector[0] = State.STOP_RUNNING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state STARTUP */
	private void enterSequence_MAIN_REGION_STARTUP_default() {
		stateVector[1] = State.MAIN_REGION_STARTUP;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state EXPIRATORYPAUSE */
	private void enterSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_default() {
		entryAction_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
		stateVector[1] = State.MAIN_REGION_PCV_R1_EXPIRATORYPAUSE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state EXPIRATION */
	private void enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default() {
		entryAction_MAIN_REGION_PCV_R1_EXPIRATION();
		stateVector[1] = State.MAIN_REGION_PCV_R1_EXPIRATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state INSPIRATION */
	private void enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default() {
		entryAction_MAIN_REGION_PCV_R1_INSPIRATION();
		stateVector[1] = State.MAIN_REGION_PCV_R1_INSPIRATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state INSPIRATORYPAUSE */
	private void enterSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_default() {
		entryAction_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
		stateVector[1] = State.MAIN_REGION_PCV_R1_INSPIRATORYPAUSE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state RM */
	private void enterSequence_MAIN_REGION_PCV_R1_RM_default() {
		entryAction_MAIN_REGION_PCV_R1_RM();
		stateVector[1] = State.MAIN_REGION_PCV_R1_RM;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state EXPIRATORYPAUSE */
	private void enterSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_default() {
		entryAction_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
		stateVector[1] = State.MAIN_REGION_PSV_R1_EXPIRATORYPAUSE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state EXPIRATION */
	private void enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default() {
		entryAction_MAIN_REGION_PSV_R1_EXPIRATION();
		stateVector[1] = State.MAIN_REGION_PSV_R1_EXPIRATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state INSPIRATION */
	private void enterSequence_MAIN_REGION_PSV_R1_INSPIRATION_default() {
		entryAction_MAIN_REGION_PSV_R1_INSPIRATION();
		stateVector[1] = State.MAIN_REGION_PSV_R1_INSPIRATION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state INSPIRATORYPAUSE */
	private void enterSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_default() {
		entryAction_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
		stateVector[1] = State.MAIN_REGION_PSV_R1_INSPIRATORYPAUSE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state RM */
	private void enterSequence_MAIN_REGION_PSV_R1_RM_default() {
		entryAction_MAIN_REGION_PSV_R1_RM();
		stateVector[1] = State.MAIN_REGION_PSV_R1_RM;
		stateConfVectorPosition = 1;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_MAIN_REGION__final__default() {
		stateVector[1] = State.MAIN_REGION__FINAL_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state SELFTEST */
	private void enterSequence_MAIN_REGION_SELFTEST_default() {
		stateVector[1] = State.MAIN_REGION_SELFTEST;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state VENTILATIONOFF */
	private void enterSequence_MAIN_REGION_VENTILATIONOFF_default() {
		entryAction_MAIN_REGION_VENTILATIONOFF();
		stateVector[1] = State.MAIN_REGION_VENTILATIONOFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region stop */
	private void enterSequence_stop_default() {
		react_stop__entry_Default();
	}
	
	/* 'default' enter sequence for region MAIN_REGION */
	private void enterSequence_MAIN_REGION_default() {
		react_MAIN_REGION__entry_Default();
	}
	
	/* Default exit sequence for state stopRequested */
	private void exitSequence_stop_stopRequested() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state running */
	private void exitSequence_stop_running() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state STARTUP */
	private void exitSequence_MAIN_REGION_STARTUP() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state PCV */
	private void exitSequence_MAIN_REGION_PCV() {
		exitSequence_MAIN_REGION_PCV_R1();
	}
	
	/* Default exit sequence for state EXPIRATORYPAUSE */
	private void exitSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
	}
	
	/* Default exit sequence for state EXPIRATION */
	private void exitSequence_MAIN_REGION_PCV_R1_EXPIRATION() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PCV_R1_EXPIRATION();
	}
	
	/* Default exit sequence for state INSPIRATION */
	private void exitSequence_MAIN_REGION_PCV_R1_INSPIRATION() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PCV_R1_INSPIRATION();
	}
	
	/* Default exit sequence for state INSPIRATORYPAUSE */
	private void exitSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
	}
	
	/* Default exit sequence for state RM */
	private void exitSequence_MAIN_REGION_PCV_R1_RM() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PCV_R1_RM();
	}
	
	/* Default exit sequence for state PSV */
	private void exitSequence_MAIN_REGION_PSV() {
		exitSequence_MAIN_REGION_PSV_R1();
	}
	
	/* Default exit sequence for state EXPIRATORYPAUSE */
	private void exitSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
	}
	
	/* Default exit sequence for state EXPIRATION */
	private void exitSequence_MAIN_REGION_PSV_R1_EXPIRATION() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PSV_R1_EXPIRATION();
	}
	
	/* Default exit sequence for state INSPIRATION */
	private void exitSequence_MAIN_REGION_PSV_R1_INSPIRATION() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PSV_R1_INSPIRATION();
	}
	
	/* Default exit sequence for state INSPIRATORYPAUSE */
	private void exitSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
	}
	
	/* Default exit sequence for state RM */
	private void exitSequence_MAIN_REGION_PSV_R1_RM() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_PSV_R1_RM();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_MAIN_REGION__final_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state SELFTEST */
	private void exitSequence_MAIN_REGION_SELFTEST() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_MAIN_REGION_SELFTEST();
	}
	
	/* Default exit sequence for state VENTILATIONOFF */
	private void exitSequence_MAIN_REGION_VENTILATIONOFF() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region stop */
	private void exitSequence_stop() {
		switch (stateVector[0]) {
		case STOP_STOPREQUESTED:
			exitSequence_stop_stopRequested();
			break;
		case STOP_RUNNING:
			exitSequence_stop_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region MAIN_REGION */
	private void exitSequence_MAIN_REGION() {
		switch (stateVector[1]) {
		case MAIN_REGION_STARTUP:
			exitSequence_MAIN_REGION_STARTUP();
			break;
		case MAIN_REGION_PCV_R1_EXPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
			break;
		case MAIN_REGION_PCV_R1_EXPIRATION:
			exitSequence_MAIN_REGION_PCV_R1_EXPIRATION();
			break;
		case MAIN_REGION_PCV_R1_INSPIRATION:
			exitSequence_MAIN_REGION_PCV_R1_INSPIRATION();
			break;
		case MAIN_REGION_PCV_R1_INSPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
			break;
		case MAIN_REGION_PCV_R1_RM:
			exitSequence_MAIN_REGION_PCV_R1_RM();
			break;
		case MAIN_REGION_PSV_R1_EXPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
			break;
		case MAIN_REGION_PSV_R1_EXPIRATION:
			exitSequence_MAIN_REGION_PSV_R1_EXPIRATION();
			break;
		case MAIN_REGION_PSV_R1_INSPIRATION:
			exitSequence_MAIN_REGION_PSV_R1_INSPIRATION();
			break;
		case MAIN_REGION_PSV_R1_INSPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
			break;
		case MAIN_REGION_PSV_R1_RM:
			exitSequence_MAIN_REGION_PSV_R1_RM();
			break;
		case MAIN_REGION__FINAL_:
			exitSequence_MAIN_REGION__final_();
			break;
		case MAIN_REGION_SELFTEST:
			exitSequence_MAIN_REGION_SELFTEST();
			break;
		case MAIN_REGION_VENTILATIONOFF:
			exitSequence_MAIN_REGION_VENTILATIONOFF();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region R1 */
	private void exitSequence_MAIN_REGION_PCV_R1() {
		switch (stateVector[1]) {
		case MAIN_REGION_PCV_R1_EXPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
			break;
		case MAIN_REGION_PCV_R1_EXPIRATION:
			exitSequence_MAIN_REGION_PCV_R1_EXPIRATION();
			break;
		case MAIN_REGION_PCV_R1_INSPIRATION:
			exitSequence_MAIN_REGION_PCV_R1_INSPIRATION();
			break;
		case MAIN_REGION_PCV_R1_INSPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
			break;
		case MAIN_REGION_PCV_R1_RM:
			exitSequence_MAIN_REGION_PCV_R1_RM();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region R1 */
	private void exitSequence_MAIN_REGION_PSV_R1() {
		switch (stateVector[1]) {
		case MAIN_REGION_PSV_R1_EXPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
			break;
		case MAIN_REGION_PSV_R1_EXPIRATION:
			exitSequence_MAIN_REGION_PSV_R1_EXPIRATION();
			break;
		case MAIN_REGION_PSV_R1_INSPIRATION:
			exitSequence_MAIN_REGION_PSV_R1_INSPIRATION();
			break;
		case MAIN_REGION_PSV_R1_INSPIRATORYPAUSE:
			exitSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
			break;
		case MAIN_REGION_PSV_R1_RM:
			exitSequence_MAIN_REGION_PSV_R1_RM();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_MAIN_REGION_PCV_R1__choice_0() {
		if (getExp_pause()) {
			enterSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_default();
		} else {
			enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_MAIN_REGION_PCV_R1__choice_1() {
		if (getMode()==getMVM_mode_PSV()) {
			exitSequence_MAIN_REGION_PCV();
			entryAction_MAIN_REGION_PSV();
			react_MAIN_REGION_PSV_R1__choice_0();
			react(0l);
		} else {
			if (getIns_pause()) {
				enterSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_default();
			} else {
				react_MAIN_REGION_PCV_R1__choice_2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_MAIN_REGION_PCV_R1__choice_2() {
		if (getRm_request()) {
			enterSequence_MAIN_REGION_PCV_R1_RM_default();
		} else {
			enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_MAIN_REGION_PSV_R1__choice_0() {
		if (getIns_pause()) {
			enterSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_default();
		} else {
			react_MAIN_REGION_PSV_R1__choice_1();
		}
	}
	
	/* The reactions of state null. */
	private void react_MAIN_REGION_PSV_R1__choice_1() {
		if (getRm_request()) {
			enterSequence_MAIN_REGION_PSV_R1_RM_default();
		} else {
			enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_stop__entry_Default() {
		enterSequence_stop_running_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MAIN_REGION__entry_Default() {
		enterSequence_MAIN_REGION_STARTUP_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long stop_stopRequested_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (!getStopVentilationReq()) {
				exitSequence_stop_stopRequested();
				enterSequence_stop_running_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long stop_running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if ((((current.iface.stopVentilation && !isStateActive(State.MAIN_REGION_SELFTEST)) && !isStateActive(State.MAIN_REGION_STARTUP)) && !isStateActive(State.MAIN_REGION_VENTILATIONOFF))) {
				exitSequence_stop_running();
				enterSequence_stop_stopRequested_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_STARTUP_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.iface.poweroff) {
				exitSequence_MAIN_REGION_STARTUP();
				enterSequence_MAIN_REGION__final__default();
				transitioned_after = 1l;
			} else {
				if (current.iface.startupEnded) {
					exitSequence_MAIN_REGION_STARTUP();
					enterSequence_MAIN_REGION_SELFTEST_default();
					react(0l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.iface.poweroff) {
				exitSequence_MAIN_REGION_PCV();
				operationCallback.openOutputValve();
				
				operationCallback.closeInputValve();
				
				enterSequence_MAIN_REGION__final__default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_R1_EXPIRATORYPAUSE_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_time_event_0) {
				exitSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
				setExp_pause(false);
				
				current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE_time_event_0 = false;
				enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
				mAIN_REGION_PCV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (!getExp_pause()) {
					exitSequence_MAIN_REGION_PCV_R1_EXPIRATORYPAUSE();
					enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
					mAIN_REGION_PCV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PCV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_R1_EXPIRATION_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if ((getStopVentilationReq() || current.iface.stopVentilation)) {
				exitSequence_MAIN_REGION_PCV();
				setApnea_backup_mode(false);
				
				setStopVentilationReq(false);
				
				enterSequence_MAIN_REGION_VENTILATIONOFF_default();
				react(0l);
				
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_0) {
					exitSequence_MAIN_REGION_PCV_R1_EXPIRATION();
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_0 = false;
					react_MAIN_REGION_PCV_R1__choice_0();
					transitioned_after = 1l;
				} else {
					if (((current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_1) && ((operationCallback.dropPAW_ITS_PCV() && !getExp_pause())))) {
						exitSequence_MAIN_REGION_PCV_R1_EXPIRATION();
						current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_EXPIRATION_time_event_1 = false;
						enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
						mAIN_REGION_PCV_react(1l);
						
						transitioned_after = 1l;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PCV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_R1_INSPIRATION_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATION_time_event_0) {
				exitSequence_MAIN_REGION_PCV_R1_INSPIRATION();
				current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATION_time_event_0 = false;
				react_MAIN_REGION_PCV_R1__choice_1();
				transitioned_after = 1l;
			} else {
				if (operationCallback.pawGTMaxPinsp()) {
					exitSequence_MAIN_REGION_PCV_R1_INSPIRATION();
					enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
					mAIN_REGION_PCV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PCV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_R1_INSPIRATORYPAUSE_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getIns_pause()) {
				exitSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
				enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
				mAIN_REGION_PCV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_time_event_0) {
					exitSequence_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE();
					setIns_pause(false);
					
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_INSPIRATORYPAUSE_time_event_0 = false;
					enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
					mAIN_REGION_PCV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PCV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PCV_R1_RM_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getRm_request()) {
				exitSequence_MAIN_REGION_PCV_R1_RM();
				enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
				mAIN_REGION_PCV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_RM_time_event_0) {
					exitSequence_MAIN_REGION_PCV_R1_RM();
					setRm_request(false);
					
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PCV_R1_RM_time_event_0 = false;
					enterSequence_MAIN_REGION_PCV_R1_EXPIRATION_default();
					mAIN_REGION_PCV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PCV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.iface.poweroff) {
				exitSequence_MAIN_REGION_PSV();
				operationCallback.openOutputValve();
				
				operationCallback.closeInputValve();
				
				enterSequence_MAIN_REGION__final__default();
				transitioned_after = 1l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_R1_EXPIRATORYPAUSE_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_time_event_0) {
				exitSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
				setExp_pause(false);
				
				current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_time_event_0 = false;
				enterSequence_MAIN_REGION_PSV_R1_INSPIRATION_default();
				mAIN_REGION_PSV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (!getExp_pause()) {
					exitSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE();
					enterSequence_MAIN_REGION_PSV_R1_INSPIRATION_default();
					mAIN_REGION_PSV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PSV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_R1_EXPIRATION_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if ((getStopVentilationReq() || current.iface.stopVentilation)) {
				exitSequence_MAIN_REGION_PSV();
				setStopVentilationReq(false);
				
				enterSequence_MAIN_REGION_VENTILATIONOFF_default();
				react(0l);
				
				transitioned_after = 1l;
			} else {
				if (((current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_0) && ((operationCallback.dropPAW_ITS_PSV() && !getExp_pause())))) {
					exitSequence_MAIN_REGION_PSV_R1_EXPIRATION();
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_0 = false;
					enterSequence_MAIN_REGION_PSV_R1_INSPIRATION_default();
					mAIN_REGION_PSV_react(1l);
					
					transitioned_after = 1l;
				} else {
					if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_1) {
						exitSequence_MAIN_REGION_PSV();
						operationCallback.apneaAlarm();
						
						setApnea_backup_mode(true);
						
						setMode(mVM_mode_PCV);
						
						current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_1 = false;
						enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
						react(0l);
						
						transitioned_after = 1l;
					} else {
						if (((current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_2) && (getExp_pause()))) {
							exitSequence_MAIN_REGION_PSV_R1_EXPIRATION();
							current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_2 = false;
							enterSequence_MAIN_REGION_PSV_R1_EXPIRATORYPAUSE_default();
							mAIN_REGION_PSV_react(1l);
							
							transitioned_after = 1l;
						} else {
							if (((current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_3) && (getMode()==getMVM_mode_PCV()))) {
								exitSequence_MAIN_REGION_PSV();
								current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_EXPIRATION_time_event_3 = false;
								enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
								react(0l);
								
								transitioned_after = 1l;
							}
						}
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PSV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_R1_INSPIRATION_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (((current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_0) && (operationCallback.flowDropPSV()))) {
				exitSequence_MAIN_REGION_PSV_R1_INSPIRATION();
				current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_0 = false;
				react_MAIN_REGION_PSV_R1__choice_0();
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_1) {
					exitSequence_MAIN_REGION_PSV_R1_INSPIRATION();
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATION_time_event_1 = false;
					react_MAIN_REGION_PSV_R1__choice_0();
					transitioned_after = 1l;
				} else {
					if (operationCallback.pawGTMaxPinsp()) {
						exitSequence_MAIN_REGION_PSV_R1_INSPIRATION();
						enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
						mAIN_REGION_PSV_react(1l);
						
						transitioned_after = 1l;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PSV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_R1_INSPIRATORYPAUSE_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getIns_pause()) {
				exitSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
				enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
				mAIN_REGION_PSV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_time_event_0) {
					exitSequence_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE();
					setIns_pause(false);
					
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_INSPIRATORYPAUSE_time_event_0 = false;
					enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
					mAIN_REGION_PSV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PSV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_PSV_R1_RM_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getRm_request()) {
				exitSequence_MAIN_REGION_PSV_R1_RM();
				enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
				mAIN_REGION_PSV_react(1l);
				
				transitioned_after = 1l;
			} else {
				if (current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_RM_time_event_0) {
					exitSequence_MAIN_REGION_PSV_R1_RM();
					setRm_request(false);
					
					current.timeEvents.mVMStateMachineCore_MAIN_REGION_PSV_R1_RM_time_event_0 = false;
					enterSequence_MAIN_REGION_PSV_R1_EXPIRATION_default();
					mAIN_REGION_PSV_react(1l);
					
					transitioned_after = 1l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = mAIN_REGION_PSV_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION__final__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_SELFTEST_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.iface.poweroff) {
				exitSequence_MAIN_REGION_SELFTEST();
				enterSequence_MAIN_REGION__final__default();
				transitioned_after = 1l;
			} else {
				if (current.iface.selfTestPassed) {
					exitSequence_MAIN_REGION_SELFTEST();
					enterSequence_MAIN_REGION_VENTILATIONOFF_default();
					react(0l);
					
					transitioned_after = 1l;
				} else {
					if (current.iface.resume) {
						exitSequence_MAIN_REGION_SELFTEST();
						enterSequence_MAIN_REGION_VENTILATIONOFF_default();
						react(0l);
						
						transitioned_after = 1l;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long mAIN_REGION_VENTILATIONOFF_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (current.iface.poweroff) {
				exitSequence_MAIN_REGION_VENTILATIONOFF();
				enterSequence_MAIN_REGION__final__default();
				transitioned_after = 1l;
			} else {
				if (((current.iface.startVentilation) && (getMode()==getMVM_mode_PCV()))) {
					exitSequence_MAIN_REGION_VENTILATIONOFF();
					operationCallback.start();
					
					operationCallback.closeOutputValve();
					
					enterSequence_MAIN_REGION_PCV_R1_INSPIRATION_default();
					react(0l);
					
					transitioned_after = 1l;
				} else {
					if (((current.iface.startVentilation) && (getMode()==getMVM_mode_PSV()))) {
						exitSequence_MAIN_REGION_VENTILATIONOFF();
						operationCallback.start();
						
						operationCallback.closeOutputValve();
						
						entryAction_MAIN_REGION_PSV();
						enterSequence_MAIN_REGION_PSV_R1_INSPIRATION_default();
						react(0l);
						
						transitioned_after = 1l;
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
